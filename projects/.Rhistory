library(dplyr)
library(ggplot2)
choice.dat <- readRDS(file = ("/Users/kavyamuraliparthasarathy/Downloads/data/choice-data.rds"))
choice.data <- read.csv("/Users/kavyamuraliparthasarathy/Downloads/data/cleaned-data.csv")
order <- read.csv("/Users/kavyamuraliparthasarathy/Downloads/data/scene_order.csv")
choice.dat <- merge(choice.dat, order[, c("ResponseId", "scene.order")], by = "ResponseId")
choice.dat <- choice.dat[choice.dat$choice != "No choice made",]
choice.dat <- na.omit(choice.dat)
# time to a factor since it's categorical in nature
choice.dat$treat.time <- as.factor(choice.dat$treat.time)
# calculating expected number of potholes
choice.dat$exp.numpot.stay <- choice.dat$num.potholes.stay * 1 - choice.dat$prob.stop.stay
choice.dat$exp.numpot.change <- choice.dat$num.potholes.change * 1 - choice.dat$prob.stop.change
# Calculate the absolute difference in expected potholes
choice.dat$pothole_diff_abs <- abs(choice.dat$exp.numpot.change - choice.dat$exp.numpot.stay)
# Define the optimal choice variable based on expected pothole numbers
choice.dat$best.choice <- ifelse(choice.dat$exp.numpot.stay <= choice.dat$exp.numpot.change, 1, 0)
#check if participant choices match this bestchoice:
#choice_matches_best = 1,`the dependent variable- which is binary signifies choosing the lane with the fewer expected potholes, making it the optimal choice
choice.dat$choice_matches_best <- ifelse(choice.dat$choice == choice.dat$best.choice, 1, 0)
prop.table(table(choice.dat$choice_matches_best))
table(choice.dat$choice, choice.dat$best.choice)
# Convert 'choice' column to numeric format
choice.dat$numeric_choice <- ifelse(choice.dat$choice == "Stay in lane", 1, 2)
# Create new column to check if choice matches best choice
choice.dat$choice_matches_best <- ifelse(choice.dat$numeric_choice == choice.dat$best.choice, 1, 0)
# Compute the proportion of choices that match the best choice
prop.table(table(choice.dat$choice_matches_best)) #majority of the participants (around 63.42%) did not make the optimal choice based on the expected number of potholes
head(choice.dat$pothole_diff_abs)
choice.dat <- merge(choice.dat, choice.data[, c("ResponseId", "age_cat", "gender")], by = "ResponseId", all.x = TRUE)
table(choice.dat$gender, choice.dat$treat.time)
choice.dat <- subset(choice.dat, gender %in% c("Male", "Female"))
choice.dat$gender_binary <- ifelse(choice.dat$gender == "Male", 1, 0) #male 1
model_gender <- glm(choice_matches_best ~ gender_binary + treat.time + gender_binary:treat.time,
family = binomial(link = "logit"), data = choice.dat)
summary(model_gender)
# Loop through each risk question to recode based on risk_likert.order
for (i in 1:6) {
risk_col <- paste0("risk_", i)
if (choice.data$risk_likert.order[i] == "Disagree to Agree") {
choice.data[[risk_col]] <- 6 - choice.data[[risk_col]]
} else if (choice.data$risk_likert.order[i] == "Agree to Disagree") {
# For "Agree to Disagree", the natural order is already from agreement (low risk) to disagreement (high risk)
# Therefore, no adjustment is needed
next
}
}
sapply(choice.data[,paste0("risk_", 1:6)], class)
lapply(choice.data[,paste0("risk_", 1:6)], unique)
# Create a lookup vector for the Likert scale
likert_lookup <- c("Strongly disagree" = 1,
"Somewhat disagree" = 2,
"Neither agree nor disagree" = 3,
"Somewhat agree" = 4,
"Strongly agree" = 5)
#  the lookup to each risk column
choice.data[,paste0("risk_", 1:6)] <- lapply(choice.data[,paste0("risk_", 1:6)], function(x) as.numeric(likert_lookup[x]))
# Compute the aggregate risk score
choice.data$risk_score <- rowSums(choice.data[,paste0("risk_", 1:6)], na.rm = TRUE)
choice.dat <- merge(choice.dat, choice.data[, c("ResponseId", "risk_score")], by="ResponseId", all.x=TRUE)
# Create risk attitude categories based on tertiles
choice.dat$risk_attitude_tertiles <- cut(choice.dat$risk_score, breaks = quantile(choice.dat$risk_score, probs = c(0, 1/3, 2/3, 1)), include.lowest = TRUE, labels = c("Low", "Medium", "High"))
# Fit the logistic regression model with the new risk attitude categorization
model_risk_tertiles <- glm(choice_matches_best ~ risk_attitude_tertiles + treat.time, family = binomial(link = "logit"), data = choice.dat)
# Summary of the model
summary(model_risk_tertiles)
model_final <- glm(choice_matches_best ~ pothole_diff_abs + treat.time + gender_binary + risk_attitude_tertiles, family = binomial(link = "logit"), data = choice.dat)
summary(model_final)
# Check for missing values in the entire dataset
sapply(choice.dat, function(x) sum(is.na(x)))
# Check for missing values specifically in the treat.time variable
sum(is.na(choice.dat$treat.time))
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Check for missing values in the entire dataset
missing_values <- sapply(choice.dat, function(x) sum(is.na(x)))
print(missing_values)
# Check for missing values specifically in the treat.time variable
missing_treat_time <- sum(is.na(choice.dat$treat.time))
print(missing_treat_time)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Ensure treat.time is an ordered factor
choice.dat$treat.time <- factor(choice.dat$treat.time,
levels = c("No time limit", "60 seconds limit", "20 seconds limit", "10 seconds limit", "5 seconds limit"),
ordered = TRUE)
# Check for any remaining missing values in the dataset
sapply(choice.dat, function(x) sum(is.na(x)))
# Specifically check treat.time
sum(is.na(choice.dat$treat.time))
# Ensure treat.time is an ordered factor
choice.dat$treat.time <- factor(choice.dat$treat.time,
levels = c("No time limit", "60 seconds limit", "20 seconds limit", "10 seconds limit", "5 seconds limit"),
ordered = TRUE)
# Function for mode imputation
impute_mode <- function(x) {
mode_value <- as.character(x[which.max(tabulate(match(x, unique(x))))])
x[is.na(x)] <- mode_value
return(x)
}
# Impute missing values for treat.time
choice.dat$treat.time <- impute_mode(choice.dat$treat.time)
# Verify the imputed data
sapply(choice.dat, function(x) sum(is.na(x)))
# Verify no missing values in treat.time
sum(is.na(choice.dat$treat.time))
# Fit the logistic regression model with polynomial contrasts
model_updated <- glm(choice_matches_best ~ pothole_diff_abs + poly(as.numeric(treat.time), 4) + gender_binary + risk_attitude_tertiles,
family = binomial(link = "logit"),
data = choice.dat)
# Summary of the updated model
summary(model_updated)
